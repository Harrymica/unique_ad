@page "/orders"
@layout AdminLayout


<PageTitle>Orders - Printing Press Admin</PageTitle>

<div class="orders-container">
    <div class="page-header">
        <h1>Orders</h1>
        <div class="header-actions">
            <input type="text" class="form-control" placeholder="Search orders..." @bind="_searchTerm" @bind:event="oninput" />
            <button class="btn btn-outline">
                <i class="fas fa-filter mr-2"></i>Filter
            </button>
        </div>
    </div>

    <div class="card">
        <table class="table">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Customer</th>
                    <th>Items</th>
                    <th>Total</th>
                    <th>Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in _filteredOrders)
                {
                    <tr>
                        <td>@order.Id</td>
                        <td>@order.Customer</td>
                        <td>@order.Items</td>
                        <td>$@order.Total.ToString("F2")</td>
                        <td>@order.Date.ToShortDateString()</td>
                        <td>@GetStatusBadge(order.Status)</td>
                        <td>
                            <button class="btn btn-outline btn-icon" @onclick="() => ViewOrder(order)">
                                <i class="fas fa-eye"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (_showViewDialog)
    {
        <div class="dialog-overlay" @onclick="CloseViewDialog">
            <div class="dialog" @onclick:stopPropagation="true">
                <div class="dialog-header">
                    <h2>Order Details</h2>
                    <button class="dialog-close" @onclick="CloseViewDialog">×</button>
                </div>
                <div class="dialog-content">
                    @if (_selectedOrder != null)
                    {
                        <div class="order-details">
                            <div class="detail-row">
                                <div class="detail-label">Order ID:</div>
                                <div class="detail-value">@_selectedOrder.Id</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Customer:</div>
                                <div class="detail-value">@_selectedOrder.Customer</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Items:</div>
                                <div class="detail-value">@_selectedOrder.Items</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Total:</div>
                                <div class="detail-value">$@_selectedOrder.Total.ToString("F2")</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Date:</div>
                                <div class="detail-value">@_selectedOrder.Date.ToShortDateString()</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Status:</div>
                                <div class="detail-value">@GetStatusBadge(_selectedOrder.Status)</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<OrderItem> _orders = new List<OrderItem>();
    private List<OrderItem> _filteredOrders = new List<OrderItem>();
    private string _searchTerm = "";
    private bool _showViewDialog = false;
    private OrderItem _selectedOrder;

    protected override void OnInitialized()
    {
        // Initialize with sample data
        _orders = new List<OrderItem>
        {
            new OrderItem
            {
                Id = "ORD-001",
                Customer = "John Smith",
                Items = "Business Cards (500)",
                Total = 49.99m,
                Status = "completed",
                Date = DateTime.Parse("2023-04-15")
            },
            new OrderItem
            {
                Id = "ORD-002",
                Customer = "Emily Johnson",
                Items = "Brochures (100)",
                Total = 129.99m,
                Status = "processing",
                Date = DateTime.Parse("2023-04-14")
            },
            new OrderItem
            {
                Id = "ORD-003",
                Customer = "Michael Brown",
                Items = "Posters (10)",
                Total = 89.99m,
                Status = "pending",
                Date = DateTime.Parse("2023-04-15")
            },
            new OrderItem
            {
                Id = "ORD-004",
                Customer = "Sarah Davis",
                Items = "Flyers (1000)",
                Total = 199.99m,
                Status = "shipped",
                Date = DateTime.Parse("2023-04-12")
            },
            new OrderItem
            {
                Id = "ORD-005",
                Customer = "Robert Wilson",
                Items = "Banners (2)",
                Total = 149.99m,
                Status = "processing",
                Date = DateTime.Parse("2023-04-13")
            }
        };

        _filteredOrders = _orders;
    }

    private void Search()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredOrders = _orders;
        }
        else
        {
            _filteredOrders = _orders.Where(o =>
                o.Id.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                o.Customer.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                o.Items.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private void ViewOrder(OrderItem order)
    {
        _selectedOrder = order;
        _showViewDialog = true;
    }

    private void CloseViewDialog()
    {
        _showViewDialog = false;
    }

    private RenderFragment GetStatusBadge(string status)
    {
        return builder =>
        {
            builder.OpenElement(0, "span");

            switch (status)
            {
                case "pending":
                    builder.AddAttribute(1, "class", "badge badge-outline");
                    builder.AddContent(2, "Pending");
                    break;
                case "processing":
                    builder.AddAttribute(1, "class", "badge badge-info");
                    builder.AddContent(2, "Processing");
                    break;
                case "shipped":
                    builder.AddAttribute(1, "class", "badge badge-warning");
                    builder.AddContent(2, "Shipped");
                    break;
                case "completed":
                    builder.AddAttribute(1, "class", "badge badge-success");
                    builder.AddContent(2, "Completed");
                    break;
                case "cancelled":
                    builder.AddAttribute(1, "class", "badge badge-danger");
                    builder.AddContent(2, "Cancelled");
                    break;
                default:
                    builder.AddAttribute(1, "class", "badge badge-outline");
                    builder.AddContent(2, "Unknown");
                    break;
            }

            builder.CloseElement();
        };
    }

    public class OrderItem
    {
        public string Id { get; set; }
        public string Customer { get; set; }
        public string Items { get; set; }
        public decimal Total { get; set; }
        public string Status { get; set; }
        public DateTime Date { get; set; }
    }
}
