@page "/orders/{Id:guid}"
@layout AdminLayout
@inject IAppService appServ
@inject IApplicationService weAppServ
<PageTitle>Orders - Printing Press Admin</PageTitle>

<div class="orders-container">
    <div class="page-header">
        <h1>Orders</h1>

       

        <div class="header-actions">
            <select class="form-control ml-2" @bind="_selectedStatus" style="max-width:100px">
                <option value="">All Statuses</option>
                <option value="Pending">Pending</option>
                <option value="processing">Processing</option>
                <option value="shipped">Shipped</option>
                <option value="completed">Completed</option>
                <option value="cancelled">Cancelled</option>
            </select>
            <input type="text" class="form-control" placeholder="Search orders..." @bind="_searchTerm" @bind:event="oninput" />
            <button class="btn btn-outline" @onclick="Search">
                <i class="fas fa-filter mr-2"></i>Filter
            </button>
        </div>
    </div>

    <div class="card">
        <div class="table-responsive">
        <table class="table" >
            <thead >
                <tr>
                   @*  <th>Order ID</th> *@
                     <th>Image</th>
                    <th>Customer</th>
                    <th>userName</th>
                    <th>Items</th>
                    <th>Total</th>
                    <th>Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in _filteredOrders)
                {
                    <tr>
                        <td>
                            <img src="@order.ImageUrl" class="image-cover" />
                        </td>
                        <td>@order.Phone</td>
                        @foreach (var user in _users.Where(i => i.Id == order.userId))
                        {
                            
                        <td>@user.username</td>  
                        }
                        <td>@order.Items</td>
                        <td>$@order.Total.ToString("F2")</td>
                        <td>@order.Date.ToShortDateString()</td>
                        <td>@GetStatusBadge(order.Status)</td>
                        <td>
                            <button class="btn btn-outline btn-icon" @onclick="() => ViewOrder(order)">
                                <i class="fas fa-eye"></i>
                            </button>
                            <div class="dropdown">
                                <button class="btn btn-outline btn-ghost btn-icon dropdown-toggle">
                                    <i class="fa-solid fa-ellipsis-vertical h-4 w-4"></i>
                                </button>
                                <div class="dropdown-menu dropdown-menu-right">
                                    <button class="dropdown-item" @onclick="() => ChangeStatus(order, Pending)">
                                        Pending
                                    </button>
                                    <button class="dropdown-item" @onclick="() => ChangeStatus(order, processing)">
                                        Processing
                                    </button>
                                    <button class="dropdown-item" @onclick="() => ChangeStatus(order, shipped)">
                                        Shipped
                                    </button>
                                    <button class="dropdown-item" @onclick="() => ChangeStatus(order, completed)">
                                        Completed
                                    </button>
                                    <button class="dropdown-item" @onclick="() => ChangeStatus(order, cancelled)">
                                        Cancelled
                                    </button>
                                </div>
                            </div>
                        </td>
                        
                    </tr>
                }
            </tbody>
        </table>

        </div>
    </div>

    @if (_showViewDialog)
    {
        <div class="dialog-overlay" @onclick="CloseViewDialog">
            <div class="dialog" @onclick:stopPropagation="true">
                <div class="dialog-header">
                    <h2>Order Details</h2>
                    <button class="dialog-close" @onclick="CloseViewDialog">×</button>
                </div>
                <div class="dialog-content">
                    @if (_selectedOrder != null)
                    {
                        <div class="order-details">
                            <div class="detail-row">
                                <div class="detail-label">Order ID:</div>
                                <div class="detail-value">@_selectedOrder.Id</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Customer:</div>
                                <div class="detail-value">@_selectedOrder.Phone</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Items:</div>
                                <div class="detail-value">@_selectedOrder.Items</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Total:</div>
                                <div class="detail-value">$@_selectedOrder.Total.ToString("F2")</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Date:</div>
                                <div class="detail-value">@_selectedOrder.Date.ToShortDateString()</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Status:</div>
                                <div class="detail-value">@GetStatusBadge(_selectedOrder.Status)</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>



@code {
    [Parameter]
    public Guid Id { get; set; }
    private string _selectedStatusBacking = "";
    private string _selectedStatus
    {
        get => _selectedStatusBacking;
        set
        {
            if (_selectedStatusBacking != value)
            {
                _selectedStatusBacking = value;
                ApplyFilters();
            }
        }
    }

    private List<OrderItem> _orders = new List<OrderItem>();
    private List<OrderItem> _filteredOrders = new List<OrderItem>();
    private string _searchTerm = "";
    private string Pending = "Pending";
    private string processing = "processing";
    private string shipped = "shipped";
    private string completed = "completed";
    private string cancelled = "cancelled";
    private bool _showViewDialog = false;
    private OrderItem _selectedOrder;
    private List<Users> _users = new List<Users>();




    protected override async Task OnInitializedAsync()
    {
        // Initialize with sample data

        var result = await appServ.GetOrdersAsync();
        var users = await weAppServ.GetUsersAsync();
        if(users != null)
        {
            _users = users;
        }
        if(result != null)
        {
            _orders = result.Where(i => i.userId == Id).ToList();
        }
        _filteredOrders = _orders;
    }

    private void Search()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredOrders = _orders;
        }
        else
        {
            _filteredOrders = _orders.Where(o =>
                // o.Id.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                o.Phone.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                o.Items.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private void ViewOrder(OrderItem order)
    {
        _selectedOrder = order;
        _showViewDialog = true;
    }

    private void CloseViewDialog()
    {
        _showViewDialog = false;
    }

    private async Task ChangeStatus(OrderItem model, string status)
    {
        model.Status = status;
        var response = await appServ.EditApplication(model);
    }

    private RenderFragment GetStatusBadge(string status)
    {
        return builder =>
        {
            builder.OpenElement(0, "span");

            switch (status)
            {
                case "Pending":
                    builder.AddAttribute(1, "class", "badge badge-outline");
                    builder.AddContent(2, "Pending");
                    break;
                case "processing":
                    builder.AddAttribute(1, "class", "badge badge-info");
                    builder.AddContent(2, "Processing");
                    break;
                case "shipped":
                    builder.AddAttribute(1, "class", "badge badge-warning");
                    builder.AddContent(2, "Shipped");
                    break;
                case "completed":
                    builder.AddAttribute(1, "class", "badge badge-success");
                    builder.AddContent(2, "Completed");
                    break;
                case "cancelled":
                    builder.AddAttribute(1, "class", "badge badge-danger");
                    builder.AddContent(2, "Cancelled");
                    break;
                default:
                    builder.AddAttribute(1, "class", "badge badge-outline");
                    builder.AddContent(2, "Unknown");
                    break;
            }

            builder.CloseElement();
        };
    }


    private void FilterByStatus(ChangeEventArgs e)
    {
        _selectedStatus = e?.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void SearchFilter()
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        _filteredOrders = _orders.Where(o =>
            (string.IsNullOrWhiteSpace(_searchTerm) ||
             o.Phone.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             o.Items.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
            &&
            (string.IsNullOrWhiteSpace(_selectedStatus) || o.Status == _selectedStatus)
        ).ToList();
    }


    
}
