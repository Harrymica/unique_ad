@page "/usersorder"
@layout AdminLayout
@inject IAppService appServ
@inject IApplicationService weAppServ
@inject NavigationManager navMag
<PageTitle>Orders - Printing Press Admin</PageTitle>

<div class="orders-container">
    <div class="page-header">
        <h1>Orders</h1>
        <div class="header-actions">
            <select class="form-control ml-2" @bind="_selectedStatus" style="max-width:100px">
                <option value="">All Statuses</option>
                <option value="Pending">Pending</option>
                <option value="processing">Processing</option>
                <option value="shipped">Shipped</option>
                <option value="completed">Completed</option>
                <option value="cancelled">Cancelled</option>
            </select>
            <input type="text" class="form-control" placeholder="Search orders..." @bind="_searchTerm" @bind:event="oninput" />
            <button class="btn btn-outline" @onclick="Search">
                <i class="fas fa-filter mr-2"></i>Filter
            </button>
        </div>
    </div>

    <div class="card">
        <div class="table-responsive">

        <table class="table">
            <thead>
                <tr>
                    
                    <th>Id</th>
                    <th>UserName</th>
                    <th>Phone</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in DUSers)
                {
                    <tr>
                        <td>
                            @user.Id.ToString().Substring(0,8) ...
                        </td>
                        <td>@user.username</td>
                        <td>@user.Phone</td>

                        <td>
                        <button class="btn btn-outline btn-icon" @onclick="()=> ViewOrder(user.Id)">
                            <i class="fas fa-eye"></i>
                        </button>

                        </td>
                    </tr>
                }
            </tbody>
        </table>
        </div>
    </div>

    @if (_showViewDialog)
    {
        <div class="dialog-overlay" @onclick="CloseViewDialog">
            <div class="dialog" @onclick:stopPropagation="true">
                <div class="dialog-header">
                    <h2>Order Details</h2>
                    <button class="dialog-close" @onclick="CloseViewDialog">×</button>
                </div>
                <div class="dialog-content">
                    @if (_selectedOrder != null)
                    {
                        <div class="order-details">
                            <div class="detail-row">
                                <div class="detail-label">Order ID:</div>
                                <div class="detail-value">@_selectedOrder.Id</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Customer:</div>
                                <div class="detail-value">@_selectedOrder.Phone</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Items:</div>
                                <div class="detail-value">@_selectedOrder.Items</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Total:</div>
                                <div class="detail-value">$@_selectedOrder.Total.ToString("F2")</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Date:</div>
                                <div class="detail-value">@_selectedOrder.Date.ToShortDateString()</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Status:</div>
                                <div class="detail-value">@GetStatusBadge(_selectedOrder.Status)</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>



@code {
    private string _selectedStatusBacking = "";
    private string _selectedStatus
    {
        get => _selectedStatusBacking;
        set
        {
            if (_selectedStatusBacking != value)
            {
                _selectedStatusBacking = value;
                ApplyFilters();
            }
        }
    }

    private List<OrderItem> _orders = new List<OrderItem>();
    private List<OrderItem> _filteredOrders = new List<OrderItem>();
    private string _searchTerm = "";

    private bool _showViewDialog = false;
    private OrderItem _selectedOrder;
    private List<Users> _users = new List<Users>();
    private List<Users> DUSers = new List<Users>();




    protected override async Task OnInitializedAsync()
    {
        // Initialize with sample data

        var result = await appServ.GetOrdersAsync();
        var users = await weAppServ.GetUsersAsync();
        if (users != null)
        {
            _users = users;
        }
        if (result != null)
        {
            _orders = result;

            var userIdsWithOrders = _orders
                .Where(x => x.Status == "Pending") // Optional: already filtered
                .Select(x => x.userId)
                .Distinct()
                .ToList();

            DUSers = _users
                .Where(u => userIdsWithOrders.Contains(u.Id))
                .DistinctBy(u => u.Id) // To avoid duplicates
                .ToList();
        }
        /*if (result != null)
        {
            _orders = result;
            foreach(var c in users)
            {
                // var getUsers = users.Where(x => x.Id == c.userId).DistinctBy().ToList();
                // DUSers = getUsers;
                var getorders = result.Where(x => x.userId == c.Id).DistinctBy(i => i.userId).ToList();
                foreach(var i in getorders)
                {

                    var getUsers = _users.Where(x => x.Id == i.userId).ToList();
                    DUSers = getUsers;
                }


            }

        }*/
        _filteredOrders = _orders;
    }

    private void Search()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredOrders = _orders;
        }
        else
        {
            _filteredOrders = _orders.Where(o =>
                // o.Id.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                o.Phone.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                o.Items.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private void ViewOrder(Guid Id)
    {
        navMag.NavigateTo($"orders/{Id}");
    }

    private void CloseViewDialog()
    {
        _showViewDialog = false;
    }

    private async Task ChangeStatus(OrderItem model, string status)
    {
        model.Status = status;
        var response = await appServ.EditApplication(model);
    }

    private RenderFragment GetStatusBadge(string status)
    {
        return builder =>
        {
            builder.OpenElement(0, "span");

            switch (status)
            {
                case "Pending":
                    builder.AddAttribute(1, "class", "badge badge-outline");
                    builder.AddContent(2, "Pending");
                    break;
                case "processing":
                    builder.AddAttribute(1, "class", "badge badge-info");
                    builder.AddContent(2, "Processing");
                    break;
                case "shipped":
                    builder.AddAttribute(1, "class", "badge badge-warning");
                    builder.AddContent(2, "Shipped");
                    break;
                case "completed":
                    builder.AddAttribute(1, "class", "badge badge-success");
                    builder.AddContent(2, "Completed");
                    break;
                case "cancelled":
                    builder.AddAttribute(1, "class", "badge badge-danger");
                    builder.AddContent(2, "Cancelled");
                    break;
                default:
                    builder.AddAttribute(1, "class", "badge badge-outline");
                    builder.AddContent(2, "Unknown");
                    break;
            }

            builder.CloseElement();
        };
    }


    private void FilterByStatus(ChangeEventArgs e)
    {
        _selectedStatus = e?.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void SearchFilter()
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        _filteredOrders = _orders.Where(o =>
            (string.IsNullOrWhiteSpace(_searchTerm) ||
             o.Phone.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             o.Items.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
            &&
            (string.IsNullOrWhiteSpace(_selectedStatus) || o.Status == _selectedStatus)
        ).ToList();
    }



}
