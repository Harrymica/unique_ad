@using Microsoft.AspNetCore.Components.Web
@namespace uniquead_App.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="uniquead_App.styles.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://kit-pro.fontawesome.com/releases/v6.7.1/css/pro.min.css">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script>
        window.checkScreenWidth = () => {
            return window.innerWidth <= 768;
        };

        window.registerResizeHandler = (dotnetObj) => {
            window.addEventListener('resize', () => {
                dotnetObj.invokeMethodAsync('UpdateScreenSize', window.innerWidth <= 768);
            });
        };
    </script>



    <script src="counter.js"></script>
    <script>
        window.startCarousel = function () {
            setTimeout(() => {
                const track = document.getElementById("carouselTrack");
                if (!track) {
                    console.error("Carousel track element not found!");
                    return;
                }

                let scrollAmount = 0;
                function scroll() {
                    scrollAmount -= 1;
                    if (scrollAmount <= -track.offsetWidth / 2) {
                        scrollAmount = 0;
                    }
                    track.style.transform = `translateX(${scrollAmount}px)`;
                    requestAnimationFrame(scroll);
                }
                scroll();
            }, 500); // Wait 500ms for Blazor to render the element
        };


    </script>
    <script>
        // Add this function to your site.js or create a new JS file
        window.scrollToElement = (elementId) => {
            const element = document.getElementById(elementId)
            if (element) {
                element.scrollIntoView({ behavior: "smooth" })
                // Focus on the first input in the form
                const firstInput = element.querySelector("input")
                if (firstInput) {
                    firstInput.focus()
                }
            }
        }

    </script>
    <script>
        // Theme handling
        function setTheme(theme) {
            document.documentElement.setAttribute('data-theme', theme);
            localStorage.setItem('theme', theme);
        }

        // Check for saved theme
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            setTheme(savedTheme);
        } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            setTheme('dark');
        } else {
            setTheme('light');
        }
    </script>
    <script>
        function downloadFile(url) {
            var a = document.createElement("a");
            a.href = url;
            a.download = url.split('/').pop();  // Use the file name from the URL
            a.click();
        }
    </script>
    <script>
        window.authStorage = {
            setSession: function (sessionJson) {
                localStorage.setItem("supabase.auth.token", sessionJson);
            },
            getSession: function () {
                return localStorage.getItem("supabase.auth.token");
            },
            clearSession: function () {
                localStorage.removeItem("supabase.auth.token");
            }
        };

    </script>

    <script src="_framework/blazor.server.js"></script>
</body>
</html>
