@page "/"
@layout CustomLayout
@inject IJSRuntime JSRuntime
@using System.Timers
@implements IDisposable
@inject IAuthService authService




<CarouselPage/>


@* @if(email != null){
        <div>
            @email
    </div>
}
else
{
    <div>
        No email
    </div>
} *@


<section class="bar bg-gray no-mb padding-big text-md-center" style="background-color:#e9ecef">
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <h2 class="text-uppercase">Everything you need</h2>
                <p class="lead mb-small">We made our best to help you</p>
                <p class="mb-small">Providing corporate-level service is our point of difference. We are willing to help your business with any job, to accept any type of file, to investigate any requirement and fully explain the various options. Our team are friendly, knowledgeable and experienced. We’re here to help your company get the printing quality it needs.</p>
                <p><a href="#" class="btn btn-template-main">Read more</a></p>
            </div>
            <div class="col-md-6 text-center"><img src="https://uniquead.pk/img/digital-printing.png" alt="" class="img-fluid"></div>
        </div>
    </div>
</section>

<section class="bar no-mb color-white padding-big text-md-center bg-primary">
    <div class="container">
        <div class="row">
            <div class="col-md-6 text-center"><img src="images/cost.png" style="width: 50%" alt="" class="img-fluid"></div>
            <div class="col-md-6">
                <h2 class="text-uppercase">AWESOME PRICES</h2>
                <p class="lead mb-small">Cost effecting advertising</p>
                <p class="mb-small">Our printing company offers high quality printing for very competitive prices. We constantly compare our print services to the market to make sure we deliver your business competitive value in printing. If you are working in a marketing department and are required to submit multiple quote sources we are happy to discuss the competition and provide all the details you require.</p>
                <p><a href="#" class="btn btn-template-outlined-white">Read more</a></p>
            </div>
        </div>
    </div>
</section>

<section class="bar bg-gray no-mb padding-big text-center-sm">
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <h2 class="text-uppercase">GREAT PRINT</h2>
                <p class="mb-small">We only utilise high-end modern offset and digital equipment and substrates to deliver the very best in premium quality print outcomes. Our commitment to ensure our clients enjoy market-leading quality is unwavering. If we wouldn’t accept it for our own business, we won’t offer it for yours.</p>
                <p><a href="#" class="btn btn-template-main">Read more</a></p>
            </div>
            <div class="col-md-6 text-center"><img src="images/best-at-printing.png" style="width: 50%" alt="" class="img-fluid"></div>
        </div>
    </div>
</section>

<section class="bar background-pentagon no-mb">
    <div class="container">
        <div class="row showcase text-center" style="margin-top: 10px;">
            <div class="col-md-3 col-sm-6" id="num">
                <div class="item">
                    <div class="icon-outlined icon-sm icon-thin"><i class="fa fa-users"></i></div>
                    <h4><span class="h1 counter" id="clients">8503</span><br> Total Clients</h4>
                </div>
            </div>
            <div class="col-md-3 col-sm-6" id="num">
                <div class="item">
                    <div class="icon-outlined icon-sm icon-thin"><i class="fa fa-copy"></i></div>
                    <h4><span class="h1 counter" id="projects">19022</span><br>Projects Completed</h4>
                </div>
            </div>
            <div class="col-md-3 col-sm-6" id="num">
                <div class="item">
                    <div class="icon-outlined icon-sm icon-thin"><i class="fa fa-copy"></i></div>
                    <h4><span class="h1 counter" id="onprojects">63</span><br>Ongoing Projects</h4>
                </div>
            </div>
            <div class="col-md-3 col-sm-6" id="num">
                <div class="item">
                    <div class="icon-outlined icon-sm icon-thin"><i class="fa fa-users"></i></div>
                    <h4><span class="h1 counter" id="crew">9</span>+<br>Unique Crew</h4>
                </div>
            </div>
        </div>
    </div>

    

</section>
<section id="packages" class="bar no-mb">
    <div data-animate="fadeInUp" class="container">
        <div class="row" style="margin-top: 10px;">
            <div class="col-md-12">
                <div class="heading text-center">
                    <h2>Our Process</h2>
                </div>
                <p class="lead text-center">The Unique Advertizer is a smart digital advertising &amp; printing company established early 2008 to facilitate and accommodate the fast growing of print-on-demand and short-run printing jobs.</p>
                <div class="text-center">
                    <img src="images/process.jpg" style="width: 100%;">
                </div>
            </div>
        </div>
    </div>
</section>


<section class="slide">
    <div class="container mx-auto py-10 px-4">
        <div class="heading text-center" style="margin-top: 10px;">
        <h2>Our Clients</h2>
            @* <div class="Sboder"></div> *@
    </div>

        <div class="relative w-full overflow-hidden"
             @onmouseover="PauseAutoSlide"
             @onmouseout="ResumeAutoSlide">
            <div class="flex justify-between absolute top-1/2 left-0 right-0 z-10 -translate-y-1/2 px-4">
                <button class="rounded-full bg-white/80 backdrop-blur-sm hover:bg-white/90 p-2 flex items-center justify-center"
                        @onclick="GoToPrevious"
                        disabled="@isAnimating">

                    <span class="sr-only">Previous slide</span>
                </button>
                <button class="rounded-full bg-white/80 backdrop-blur-sm hover:bg-white/90 p-2 flex items-center justify-center"
                        @onclick="GoToNext"
                        disabled="@isAnimating">

                    <span class="sr-only">Next slide</span>
                </button>
            </div>

            <div class="@($"flex transition-transform duration-3000 ease-in-out {(isAnimating ? "transform translate-x-full" : "")}")" style="transform: translateX(-@(currentIndex * 20)%)" @onmousedown="HandleAnimationEnd">
                @foreach (var (src, index) in GetVisibleImages().Select((src, index) => (src, index)))
                {
                    <div class="img-box w-1/6 flex-shrink-0 px-2" key="@($"{currentIndex}-{index}")">
                        <img src="@(src ?? "/placeholder.svg")" alt="@($"Slide {currentIndex * imagesPerSlide + index + 1}")" class=" h-auto rounded-lg object-cover aspect-[4/3]" />
                    </div>
                }
            </div>


            <div class="flex justify-center mt-4 gap-2">
                @for (int i = 0; i < totalSlides; i++)
                {
                    var index = i; // Capture the value for the lambda
                    <button class="@($"w-3 h-3 rounded-full transition-colors {(currentIndex == index ? "bg-primary" : "bg-gray-300")}")"
                            @onclick="() => GoToSlide(index)"
                            aria-label="@($"Go to slide {index + 1}")">
                    </button>
                }
            </div>
        </div>
    </div>
</section>

@code {

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public int End { get; set; }

    private int Count { get; set; }

    private List<CarouselItem> carouselItems = new List<CarouselItem>
    {
        new CarouselItem
        {
            Id = 1,
            Image = "images/0.png",

        },
        new CarouselItem
        {
            Id = 2,
            Image = "images/1.png",

        },
        new CarouselItem
        {
            Id = 3,
            Image = "images/10.png",

        },
        new CarouselItem
        {
            Id = 4,
            Image = "images/0.png",

        },
        new CarouselItem
        {
            Id = 5,
            Image = "images/1.png",

        },
        new CarouselItem
        {
            Id = 6,
            Image = "images/10.png",

        },
        new CarouselItem
        {
            Id = 7,
            Image = "images/0.png",

        },
        new CarouselItem
        {
            Id = 8,
            Image = "images/1.png",

        },
        new CarouselItem
        {
            Id = 9,
            Image = "images/10.png",

        },
new CarouselItem
        {
            Id = 4,
            Image = "images/0.png",

        },
        new CarouselItem
        {
            Id = 5,
            Image = "images/1.png",

        },
        new CarouselItem
        {
            Id = 6,
            Image = "images/10.png",

        },
        new CarouselItem
        {
            Id = 7,
            Image = "images/0.png",

        },
        new CarouselItem
        {
            Id = 8,
            Image = "images/1.png",

        },
        new CarouselItem
        {
            Id = 9,
            Image = "images/10.png",

        },

    };

    private int currentIndex = 0;
    private bool isAutoPlaying = true;
    private Timer autoPlayTimer;
    private Timer resumeTimer;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Call JavaScript to start the counting animation
            await JSRuntime.InvokeVoidAsync("startCountingAnimation", "clients", 8503, 100);
            await JSRuntime.InvokeVoidAsync("startCountingAnimation", "projects", 19022, 100);
            await JSRuntime.InvokeVoidAsync("startCountingAnimation", "onprojects", 630, 100);
            await JSRuntime.InvokeVoidAsync("startCountingAnimation", "crew", 900, 100);

            await AutoSlide();
        }
    }

    private async Task AnimateCounter()
    {
        int start = 0;
        int duration = 2000; // 2 seconds
        int steps = 100;

        int increment = End / steps;
        int currentStep = 0;

        while (currentStep <= steps)
        {
            Count = start + (increment * currentStep);
            StateHasChanged();
            await Task.Delay(duration / steps);
            currentStep++;
        }

        Count = End;
        StateHasChanged();
    }


    private class CarouselItem
    {
        public int Id { get; set; }
        public string Image { get; set; }

    }


    private List<string> images = new List<string>
    {
        "images/0.png",
        "images/1.png",
        "images/0.png",
        "images/10.png",
        "images/2.png",
        "images/13.png",
        "images/19.png",
        "images/23.png",
        "images/21.png",
        "images/4.png",
        "images/6.png",
        "images/8.png",
        "images/9.png",
    };

    //private int currentIndex = 0;
    private bool isAnimating = false;
    private int imagesPerSlide = 6;
    private int totalSlides => (int)Math.Ceiling((double)images.Count / imagesPerSlide);

    private Timer autoSlideTimer;
    private bool autoPlayEnabled = true;
    private string email;

    protected override async Task OnInitializedAsync()
    {
        //images.AddRange(images);
        //Initialize the timer for auto-sliding
        autoSlideTimer = new Timer(5000); // 2 seconds
        autoSlideTimer.Elapsed += (sender, e) => InvokeAsync(() =>
        {
            if (!isAnimating)
            {
                GoToNext();
                StateHasChanged();
            }
        });
        autoSlideTimer.AutoReset = true;
        autoSlideTimer.Enabled = autoPlayEnabled;
        var user =  await authService.GetCurrentUser();

        if(user != null)
        {
                email = user!.Email;
            
        }
        //await AutoSlide();

        
    }
    private void GoToPrevious()
    {
        if (isAnimating) return;

        isAnimating = true;
        currentIndex = currentIndex == 0 ? totalSlides - 1 : currentIndex - 1;
    }

    private void GoToNext()
    {
        if (isAnimating) return;
        isAnimating = true;
        currentIndex = (currentIndex + 1) % (images.Count / imagesPerSlide + 1);
        isAnimating = false;
    }

    private List<string> GetVisibleImages()
    {
        int startIdx = currentIndex * imagesPerSlide;
        var imagesToShow = images.Skip(startIdx).Take(imagesPerSlide).ToList();
        if (imagesToShow.Count < imagesPerSlide)
        {
            imagesToShow.AddRange(images.Take(imagesPerSlide - imagesToShow.Count));
        }
        return imagesToShow;
    }

    private async Task AutoSlide()
    {
        while (true)
        {
            await Task.Delay(2000); // 2 seconds
            GoToNext();
            StateHasChanged();
        }
    }

    private void GoToSlide(int index)
    {
        if (isAnimating) return;

        isAnimating = true;
        currentIndex = index;
    }

    private void HandleAnimationEnd()
    {
        isAnimating = false;
        StateHasChanged();
    }
    private void PauseAutoSlide()
    {
        autoSlideTimer.Enabled = false;
    }

    private void ResumeAutoSlide()
    {
        if (autoPlayEnabled)
        {
            autoSlideTimer.Enabled = true;
        }
    }

    public void Dispose()
    {
        // Clean up the timer when the component is disposed
        autoSlideTimer?.Dispose();
    }

}

