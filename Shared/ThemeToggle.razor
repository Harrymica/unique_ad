@inject IAppService appServ
@inject IApplicationService IappServ
<style scoped>
    #d_btn i{
        display: flex;
        gap: 5px;
        position: relative;
    }
    #d_btn span{
       
            font-size: 0.94rem;
            line-height: 0.94rem;
            position: absolute;
            top: 0.1rem;
    }

    #d_btn{
        margin: 14px;
       /*  position:relative; */
    }
</style>


<div class="theme-toggle">

    <button id="d_btn">

        <i class="fa-solid fa-bell"></i>
        <span class="badge bg-primary badge-number">@orders.Count</span>
    </button>
    <button id="d_btn">
        <i class="fa-regular fa-comment"></i>
        <span class="badge bg-success badge-number">@_filteredFeedback.Count</span>
    </button>
    <button class="btn btn-outline btn-icon" id="d_btn" @onclick="ToggleTheme">
        @if (_isDarkTheme)
        {
            <i class="fas fa-sun"></i>
        }
        else
        {
            <i class="fas fa-moon"></i>
        }
    </button>
   
</div>

@code {
    private bool _isDarkTheme;
    List<OrderItem> orders = new List<OrderItem>();
    private List<feedBackModel> _filteredFeedback = new List<feedBackModel>();

    protected override async Task OnInitializedAsync()
    {
        var getOrders = await appServ.GetOrdersAsync();
        if(getOrders != null)
        {
            var userIdsWithOrders = getOrders
                .Where(x => x.Status == "Pending")
                
                .Distinct()
                .ToList();
            orders = userIdsWithOrders;//getOrders.Where(i => i.Date == DateTime.Now.AddDays(-3).Date).ToList();
        }   
        var feedbacks = await IappServ.getFeedBackList();
        _filteredFeedback = feedbacks.Where(i => i.status == false).ToList();

        // Get the current theme from localStorage if available
        var theme = "dark";//await JSRuntime.InvokeAsync<string>("localStorage.getItem", "theme");
        _isDarkTheme = theme == "dark";

        if (theme == null)
        {
            // Check for system preference
            var prefersDark = await JSRuntime.InvokeAsync<bool>("window.matchMedia", "(prefers-color-scheme: dark)");
            _isDarkTheme = prefersDark;
            await SetTheme(_isDarkTheme ? "dark" : "light");
        }
    }

    private async Task ToggleTheme()
    {
        _isDarkTheme = !_isDarkTheme;
        await SetTheme(_isDarkTheme ? "dark" : "light");
    }

    private async Task SetTheme(string theme)
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "theme", theme);
        await JSRuntime.InvokeVoidAsync("document.documentElement.setAttribute", "data-theme", theme);
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }
}
